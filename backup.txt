    //   // generateAndSendOTP(email);
    //   const saltRounds = 10;
    //   const hashedPassword = await bcrypt.hash(password, saltRounds);
    //   const newUser = await UserModel.create({ username, email, password: hashedPassword });
  
    //   const otp = `${Math.floor(1000 + Math.random() * 9000)}`;
    //   const hashedOTP = await bcrypt.hash(otp, saltRounds);
    //   const newOTP = await otpModel.create({ email, otp: hashedOTP });
  
    //   const duration = '  14 minutes';
    //   const message = 'Enter This OTP to Continue';
    //   const mailOptions = {
    //     from: 'techboompage@gmail.com',
    //     to: req.body.email,
    //     subject: 'verify your email',
    //     text: otp,
    //     html: `<p>${message}</p> <p style="color: tomato; font-size: 25px; letter-spacing: 2px;"><b>${otp}</b></p><p>This Code <b>expires in ${duration} minutes(s)</b>.</p>`,
    //   };
  
    //   console.log('Generated OTP', otp);
    //   transporter.sendMail(mailOptions, (error, info) => {
    //     if (error) {
    //       console.error('Error sending email:', error);
    //       res.status(500).json({ error: 'Error sending email' });
    //     } else {
    //       console.log('Email sent successfully:', info.response);
    //       res.redirect('/otp');
    //     }
    //   });






















        
        
        
<%- include('../layouts/header')%>
<%- include('../partials/user-header')%>


<% let totalPrice = 0; %>
<!-- cart + summary -->

<section class="bg-light my-5">
  <form id="cartSubmit">
    <div class="container">
      <div class="row">
        <!-- cart -->
        <div class="col-lg-9">
          <div class="card border shadow-0">
            <div class="m-4">
              <h4 class="card-title mb-4">Your shopping cart</h4>
              <%if(cart && cart.Items && cart.Items.length > 0) { %> <%
              cart.Items.forEach(function (cartItem) { %>
              <div class="row gy-3 mb-4">
                <div class="col-lg-5">
                  <div class="me-lg-5">
                    <div class="d-flex">
                      <img
                        src="/uploads/<%= cartItem.ProductId.images[0] %>"
                        class="border rounded me-3"
                        style="width: 96px; height: 96px"
                      />
                      <div class="">
                        <a href="#" class="nav-link"
                          ><%= cartItem.ProductId.name %></a
                        >
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-lg-2 col-sm-6 col-6 d-flex flex-column">
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <button
                        class="btn btn-dark decrease-quantity"
                        data-product-id="<%=cartItem.ProductId._id%>"
                        type="button"
                      >
                        -
                      </button>
                    </div>
                    <input
                    type="text"
                    class="form-control text-center quantity-input"
                    id="count_<%= cartItem.ProductId._id %>"
                    value="<%= cartItem.Quantity %>"
                    data-min-value="1"
                    data-available-quantity="<%= cartItem.ProductId.stock %>"
                    />
                    <div class="input-group-append">
                      <button
                        class="btn btn-dark increase-quantity"
                        data-product-id="<%=cartItem.ProductId._id%>"
                        type="button"
                      >
                        +
                      </button>
                    </div>
                  </div>
                  <div class="">
                    ₹
                    <text
                      class="h6 product-amount"
                      id="productAmount_<%=cartItem.ProductId._id%>"
                      data-value="<%= cartItem.ProductId.discountPrice%>"
                      ><%= cartItem.ProductId.discountPrice * cartItem.Quantity
                      %></text
                    >/-
                    <br />
                    <small class="text-muted text-nowrap">
                      ₹<%= cartItem.ProductId.discountPrice %> / per item
                    </small>
                  </div>
                </div>
                <div
                  class="col-lg col-sm-6 d-flex justify-content-sm-center justify-content-md-start justify-content-lg-center justify-content-xl-end mb-2"
                >
                <div class="float-md-end">
                  <strong
                  class="card-text text-center text-danger out-of-stock-message"
                  id="outOfStockMessage_<%= cartItem.ProductId._id %>"
                  style="display: none;"
                >
                  only <%= cartItem.ProductId.stock %> items in stock
                </strong>
                    <a
                      href="#!"
                      class="btn btn-light border px-2 icon-hover-primary"
                      ><i class="fas fa-heart fa-lg px-1 text-secondary"></i
                    ></a>
                    <a
                      href="/removefromcart/<%=cartItem.ProductId._id%>"
                      class="btn btn-light border text-danger icon-hover-danger remove-button"
                    >
                      Remove</a
                    >
                  </div>
                </div>
              </div>
              <% totalPrice += cartItem.ProductId.DiscountAmount *
              cartItem.Quantity;%> <% }); %> <% } else { %>
              <p>Your shopping cart is empty.</p>
              <a href="/homepage" class="btn btn-info">Go To Shop</a>
              <% } %>
            </div>

            <div class="border-top pt-4 mx-4 mb-4">
              <p>
                <i class="fas fa-truck text-muted fa-lg"></i> Free Delivery
                within 1-2 weeks
              </p>
              <p class="text-muted"></p>
            </div>
          </div>
        </div>
        <div class="col-lg-3">
          <div class="card mb-3 border shadow-0">
            <div class="card-body">
                <div class="form-group">
                  <label class="form-label">Have coupon?</label>
                  <div id="flashMessage" class="alert alert-danger" style="display: none;"></div>
                  <div class="input-group">
                    <input
                      type="text"
                      class="form-control border"
                      id="coupon"
                      name="couponCode"
                      placeholder="Coupon code"
                    />
                    <button type="button" data-product-id="couponClaim" class="btn btn-light border applyCoupon">Apply</button>
                  </div>
                </div>
            </div>
          </div>
          <div class="card shadow-0 border">
            <div class="card-body">
              <div class="d-flex justify-content-between">
                <p class="mb-2">Sub Total :</p>
                <div id="sub-total"></div>
              </div>
              <div class="d-flex justify-content-between">
                <p class="mb-2">Discount:</p>
                <div id="discountCell"></div>
              </div>
              <div class="d-flex justify-content-between">
                <p class="mb-2">TAX:</p>
                <p class="mb-2">--</p>
              </div>
              <hr />
              <div class="d-flex justify-content-between">
                <p class="mb-2">Total price:</p>
                    <input type="text" id="totalAmountCell" class="transparent-input" name="totalPrice" readonly>
                </p>
              </div>

              <div class="mt-3">
                <button id="makePurchase" type="button" class="btn btn-success w-100 shadow-0 mb-2">

                    Make Purchase
                </button>
                <a href="/homepage" class="btn btn-light w-100 border mt-2">
                  Back to shop
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </form>
</section>

<style>
  .icon-hover-primary:hover {
    border-color: #3b71ca !important;
    background-color: white !important;
  }

  .icon-hover-primary:hover i {
    color: #3b71ca !important;
  }
  .icon-hover-danger:hover {
    border-color: #dc4c64 !important;
    background-color: white !important;
  }

  .icon-hover-danger:hover i {
    color: #dc4c64 !important
  }
  .transparent-input {
    border: none;
    background-color: transparent;
    color: inherit;
    width: 12vw;
    font-size: inherit;
    text-align: right; /* Align the text to the right */
  }
</style>

<!-- Footer -->
<%- include('../partials/user-footer')%>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const makePurchase = document.querySelector('#makePurchase')
    const removeButtons = document.querySelectorAll(".remove-button");
    const decreaseButtons = document.querySelectorAll(".decrease-quantity");
    const increaseButtons = document.querySelectorAll(".increase-quantity");
    const applyCoupon = document.querySelectorAll(".applyCoupon")


    makePurchase.addEventListener('click',(event)=>{
      event.preventDefault();
      checkStock();
    })

    async function checkStock(){
      try {
        const response = await fetch('/checkstock',{
          method:'GET',
          headers:{
            'content-type':'application/json'
            },
        });
        if (response.ok) {
          let data = await response.json()
          console.log(data)
          if(data.success){
            console.log("inside success");
            const cartSubmitForm = $('#cartSubmit'); 
            console.log($('#cartSubmit').serialize());
            $.ajax({
              url: '/cart',
              type: 'POST',
              data: $('#cartSubmit').serialize(),
              success: function (response) {
                window.location.href = ('/checkout')
                console.log('AJAX request was successful.');
                console.log(response);
              },
              error: function (xhr, status, error) {
                console.error('AJAX request failed with status:', status);
              }
            });
          }else{
            Swal.fire({
              icon: 'error',
              title: 'Insufficient Stock',
              text: data.error,
            });
            data.itemsWithInsufficientStock.forEach(item => {
            console.log("insidee insufficientstock");
            const productId = item.productId; 
            console.log(productId);
            const outOfStockMessage = document.getElementById(`outOfStockMessage_${productId}`);
            console.log(outOfStockMessage);
            if (outOfStockMessage) {
              outOfStockMessage.style.display = "block";
              outOfStockMessage.textContent = `only ${item.stock} items in stock`;
            }
          });
        }
      }
    }
 catch (error) {
        console.error("Error checking stock :", error);
      }
    }


    removeButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        event.preventDefault(); 

        Swal.fire({
          title: "Remove Product",
          text: "Are you sure you want to remove this product from your cart?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Yes, remove it",
          cancelButtonText: "Cancel",
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = button.href;
          }
        });
      });
    });

    function updateTotalAmount() {
      let totalAmount = 0;

      const productRows = document.querySelectorAll(".row.gy-3.mb-4");
      productRows.forEach((row) => {
        const productId = row
          .querySelector(".decrease-quantity")
          .getAttribute("data-product-id");
        const quantityInput = row.querySelector(`#count_${productId}`);
        const quantity = parseInt(
          row.querySelector(`#count_${productId}`).value,
          10
        );
        const productAmount = parseFloat(
          row.querySelector(`#productAmount_${productId}`).textContent
        );

        totalAmount += productAmount;
      });


      const totalAmountCell = document.getElementById("totalAmountCell");
      const subTotal = document.getElementById("sub-total");
      totalAmountCell.value = `${totalAmount.toFixed(2)}`;
      subTotal.textContent = `${totalAmount.toFixed(2)}`;
      const hiddenTotalAmount = document.getElementById('hiddenTotalAmount');
      hiddenTotalAmount.value = totalAmount.toFixed(2);
    }

    async function updateQuantity(productId, change) {
      try {
        const response = await fetch("/updateQuantity", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ productId, change }),
        });

        if (response.ok) {
          const data = await response.json();
          console.log("Received new quantity from server:", data.newQuantity);

          const quantityInput = document.getElementById(`count_${productId}`);
          const productAmount = document.getElementById(
            `productAmount_${productId}`
          );
          const existingValue = productAmount.getAttribute("data-value");

          if (quantityInput) {
            quantityInput.value = data.newQuantity;
            productAmount.textContent = existingValue * data.newQuantity;

            // Calculate and update the total amount
            updateTotalAmount();
          }
        } else {
          console.error("Error updating quantity:", response.statusText);
        }
      } catch (error) {
        console.error("Error updating quantity:", error);
      }
    }

    async function checkCoupon(couponInput,subTotal){
      try {
        const response = await fetch('/checkCoupon',{
          method: 'POST',
          headers:{
            'Content-Type': 'application/json'
          },
          body:JSON.stringify({code: couponInput, total: subTotal})
        })
        if(response.ok){
          const data=await response.json()
          if(data.success){
            console.log("inside okkk");
            console.log(data);
            const discount = parseFloat(data.discount);
            const discountCell = document.getElementById('discountCell')
            discountCell.textContent = discount.toFixed(2)
            const newTotal = parseFloat(subTotal) - discount;
            const totalAmountCell = document.getElementById('totalAmountCell');
            totalAmountCell.value = newTotal.toFixed(2);
            Swal.fire('','Coupon Applied','success')
          }else{
          console.log("inside elseee");
          Swal.fire(data.error)
          console.log(error);
          $('#flashMessage').text(data.error).show();
        }
        }
      } catch (error) {
        console.error('Error checking coupon:', error);
      }
    }

    applyCoupon.forEach(element =>{
      element.addEventListener("click",function(e){
        const couponInput = document.querySelector('#coupon').value
        const subTotal = document.getElementById("sub-total").textContent
        checkCoupon(couponInput,subTotal);
      })
    })

    decreaseButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const productId = button.getAttribute("data-product-id");
        const quantityInput = document.getElementById(`count_${productId}`);
        const quantity = parseInt(quantityInput.value, 10);
        const availableQuantity = parseInt(quantityInput.getAttribute("data-available-quantity"), 10);
        
        if (quantity === 1) {
          return;
        }
        if (quantity <= availableQuantity) {
          const outOfStockMessage = document.querySelector(`#outOfStockMessage_${productId}`);
            outOfStockMessage.style.display = "none";
          }
        updateQuantity(productId, -1);
      });
    });

    increaseButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const productId = button.getAttribute("data-product-id");
        const quantityInput = document.getElementById(`count_${productId}`);
        const quantity = parseInt(quantityInput.value, 10);
        const availableQuantity = parseInt(quantityInput.getAttribute("data-available-quantity"), 10);


        if (quantity >= availableQuantity) {
          const outOfStockMessage = document.querySelector(`#outOfStockMessage_${productId}`);
          if (outOfStockMessage) {
            outOfStockMessage.style.display = "block";
          }
          return;
        }
        updateQuantity(productId, 1);
      });
    });

    updateTotalAmount();
  });
</script>


<%- include('../layouts/footer') %>
 




































































 <%- include('../layouts/header')%> <%- include('../partials/user-header')%>
<div
  class="modal fade"
  id="addAddressModal"
  tabindex="-1"
  aria-labelledby="addAddressModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addAddressModalLabel">Add Address</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form action="/addAddress-Checkout" method="post">
          <div class="mb-3">
            <label for="fullName" class="form-label">Full Name</label>
            <input
              type="text"
              class="form-control"
              name="Name"
              id="fullName"
              placeholder="Enter your full name"
              required
            />
          </div>
          <div class="mb-3">
            <label for="address" class="form-label">Address</label>
            <input
              type="text"
              class="form-control"
              name="Address"
              id="address"
              placeholder="Enter your address"
              required
            />
          </div>
          <div class="mb-3">
            <label for="city" class="form-label">City</label>
            <input
              type="text"
              class="form-control"
              id="city"
              name="City"
              placeholder="Enter your city"
              required
            />
          </div>
          <div class="mb-3">
            <label for="pincode" class="form-label">Pincode</label>
            <input
              type="text"
              class="form-control"
              id="pincode"
              name="Pincode"
              placeholder="Enter your pincode"
              required
            />
          </div>
          <div class="mb-3">
            <label for="state" class="form-label">State</label>
            <input
              type="text"
              class="form-control"
              id="state"
              name="State"
              placeholder="Enter your state"
              required
            />
          </div>
          <div class="mb-3">
            <label for="mobileNumber" class="form-label">Mobile Number</label>
            <input
              type="tel"
              class="form-control"
              id="mobileNumber"
              name="Mobile"
              placeholder="Enter your mobile number"
              required
            />
          </div>
          <button type="submit" class="btn btn-primary">Submit</button>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" class="btn btn-primary">Save Address</button>
      </div>
    </div>
  </div>
</div>

<div class="container custom-container main">
  <form action="/checkout" method="post">
    <div class="row">
      <!-- Left Column - Col-7 -->
      <div class="col-md-7">
        <div class="card">
          <div class="card-body">
            <h5 class="card-title">Saved Addresses</h5>

            <%user.Address.forEach(function(Address) { %>
            <!-- Address Card 1 -->
            <div class="address-card row">
              <div class="col-1">
                <input
                  type="radio"
                  name="Address"
                  value="<%=Address._id%>"
                  id="address1"
                  checked
                />
              </div>
              <div class="col-5">
                <div class="address-line">Name:</div>
                <div class="address-line">Address:</div>
                <div class="address-line">City:</div>
                <div class="address-line">Pincode:</div>
                <div class="address-line">State:</div>
                <div class="address-line">Mobile Number:</div>
              </div>
              <div class="col-6">
                <div class="address-value"><%=Address.Name%></div>
                <div class="address-value"><%=Address.AddressLane%></div>
                <div class="address-value"><%=Address.City%></div>
                <div class="address-value"><%=Address.Pincode%></div>
                <div class="address-value"><%=Address.State%></div>
                <div class="address-value"><%=Address.Mobile%></div>
              </div>
            </div>
            <%})%>
            <button
              class="btn btn-info"
              data-bs-toggle="modal"
              data-bs-target="#addAddressModal"
            >
              <i class="fas fa-plus-circle"></i> Add Address
            </button>
          </div>
        </div>
      </div>

      <!-- Right Column - Col-5 -->
      <div class="col-md-5">
        <div class="card">
          <div class="card-body">
            <h5 class="card-title">Payment Methods</h5>

            <div class="form-check">
              <input
                class="form-check-input"
                type="radio"
                name="paymentMethod"
                id="cod"
                value="cod"
                checked
              />
              <label class="form-check-label" for="cod">
                Cash on Delivery (COD)
              </label>
            </div>
            <div class="form-check">
              <input
                class="form-check-input"
                type="radio"
                name="paymentMethod"
                id="online"
                value="online"
              />
              <label class="form-check-label" for="online">
                Online Payment
              </label>
            </div>
            <div class="justify-content-center">
              <button class="btn btn-success mt-4" type="submit">
                Confirm Order
              </button>
              <button class="btn btn-secondary mt-4">Back to Shop</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </form>
</div>

<style>
  .address-card {
    border: 1px solid #dee2e6;
    border-radius: 10px;
    padding: 10px;
    margin-bottom: 20px;
  }

  .address-line {
    font-weight: bold;
    margin-bottom: 5px;
  }

  .address-value {
    margin-bottom: 10px;
  }

  .card {
    border-radius: 15px;
    border: 1px solid #dee2e6;
    margin-bottom: 20px;
  }
  body {
    background-color: rgb(36, 47, 69);
  }
  .card-title {
    color: #007bff;
  }
  .main {
    margin-top: 10vh;
  }
  .address-card {
    border: 1px solid #dee2e6;
    border-radius: 10px;
    padding: 10px;
    margin-bottom: 20px;
  }

  .address-line {
    font-weight: bold;
    margin-bottom: 5px;
  }

  .address-value {
    margin-bottom: 10px;
  }

  .card {
    border-radius: 15px;
    border: 1px solid #dee2e6;
    margin-bottom: 20px;
  }

  .card-title {
    color: #007bff;
  }

  .confirm-order-btn {
    background-color: #28a745;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    margin-right: 10px;
    cursor: pointer;
  }
  .address-card {
    border: 1px solid #dee2e6;
    border-radius: 10px;
    padding: 10px;
    margin-bottom: 20px;
  }

  .address-line {
    font-weight: bold;
    margin-bottom: 5px;
  }

  .address-value {
    margin-bottom: 10px;
  }

  .card {
    border-radius: 15px;
    border: 1px solid #dee2e6;
    margin-bottom: 20px;
  }

  .card-title {
    color: #007bff;
  }

  .back-to-shop-btn {
    background-color: #58718c;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
  }
</style>

<%- include('../layouts/footer') %>




\











 
  <% if (messages || message) { %>
        <div class="messages">
          <% if (messages) { %>
            <div class="error-message">
              <%= messages %>
            </div>
          <% } %>
    
          <% if (message) { %>
            <div class="success-message">
              <%= message %>
            </div>
          <% } %>
        </div>
      <% } %>










<%- include('../layouts/header') %>
<%- include('../partials/user-header') %>
<div class="modal fade tickerTimes" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="changePasswordModalLabel">Change password</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div id="flashMessage" class="alert alert-danger" style="display: none;"></div>
          <div class="modal-body">
            <form id="passwordChangeForm">
                <div class="form-group">
                    <label for="currentPassword">Current Password:</label>
                    <input type="password" class="form-control" id="currentPassword" name="currentPassword" required>
                </div>
                <div class="form-group">
                    <label for="newPassword">New Password:</label>
                    <input type="password" class="form-control" id="password" name="newPassword" required>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password:</label>
                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                </div>
                <br>
                <button type="submit" class="btn btn-primary" id="changePasswordButton">Save</button>
            </form>
          </div>
        </div>
    </div>
</div>
<div class="container tickerTimes">
  <h6>Your Profile</h6>
  <div class="row mb-4 mt-3">
    <div class="col-lg-2">
      <div class="profile-picture d-flex flex-column">
        <div class="profile-image">
        </div>
        <input type="file" id="profile-picture" accept="image/*" style="display: none;">
        <div class="text-start">
          <label for="profile-picture" class="profile-upload-btn">
            <i class="fas fa-camera"></i> Upload Picture
          </label>
        </div>
      </div>
    </div>
    <div class="col-lg-10">
      <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" class="form-control" value="<%= user.username %>" readonly>
      </div>
      <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" class="form-control" value="<%= user.email %>" readonly>
      </div>
      <br>
      <button  class="btn btn-info" data-bs-toggle="modal" data-bs-target="#changePasswordModal">
        <i class="fas fa-plus-circle"></i> Change password
       </button>
    </div>
  </div>
  <div class="row justify-content-center">
    <div class="col-lg-12 col-md-6 col-sm-6  col-12">
        <a class="text-decoration-none" href="/orderList">
            <div class="card text-center  mb-3" style=" background: linear-gradient(to right, rgba(255,0,0,0), rgb(196, 255, 245));; height: 30vh;">
                <div class="card-header">
                    <img src="/images/order-box-removebg-preview.png" class="img-fluid" style="width: 10vh;"
                        alt="">
                </div>
                <div class="card-body ">
                    <h2 class="tickerTimes text-dark" style="font-family: 'Times New Roman', Times, serif;">
                        Orders History
                       
                    </h2>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-12 col-md-6 col-sm-6 col-12">
        <a class="text-decoration-none" href="/cart">
            <div class="card text-center mb-3" style=" background: linear-gradient(to right, rgba(255,0,0,0), rgb(196, 255, 245));; height: 30vh;">
                <div class="card-header">
                    <img src="/images/cart-card-removebg-preview.png" class="img-fluid" style="width: 10vh;"
                        alt="">
                </div>
                <div class="card-body">
                    <h2 class="tickerTimes text-dark" style="font-family: 'Times New Roman', Times, serif;">
                        Cart
                        
                    </h2>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-12 col-md-6 col-sm-6 col-12">
        <a class="text-decoration-none" href="/editAddress">
            <div class="card text-center  mb-3" style=" background: linear-gradient(to right, rgba(255,0,0,0), rgb(196, 255, 245));; height: 30vh;">
                <div class="card-header">
                    <img src="/images/address-removebg-preview.png" class="img-fluid" style="width: 10vh;"
                        alt="">
                </div>
                <div class="card-body">
                    <h2 class="tickerTimes text-dark" style="font-family: 'Times New Roman', Times, serif;">
                        Address 
                    </h2>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-12 col-md-6 col-sm-6  col-12">
        <a class="text-decoration-none" href="">
            <div class="card text-center mb-3" style=" background: linear-gradient(to right, rgba(255,0,0,0), rgb(196, 255, 245));; height: 30vh;">
                <div class="card-header">
                    <img src="/images/wishlist-card-removebg-preview.png" class="img-fluid" style="width: 10vh;"
                        alt="">
                </div>
                <div class="card-body">
                    <h2 class="tickerTimes text-dark" style="font-family: 'Times New Roman', Times, serif;">
                        Wishlist
                       
                    </h2>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-12 col-md-6 col-sm-6  col-12">
        <a class="text-decoration-none" href="">
            <div class="card text-center mb-3" style=" background: linear-gradient(to right, rgba(255,0,0,0), rgb(196, 255, 245));; height: 30vh;">
                <div class="card-header">
                    <img src="/images/review-removebg-preview.png" class="img-fluid" style="width: 10vh;"
                        alt="">
                </div>
                <div class="card-body">
                    <h2 class="tickerTimes text-dark" style="font-family: 'Times New Roman', Times, serif;">
                      My ReviewS 
                        
                    </h2>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-12 col-md-6 col-sm-6  col-12">
        <a class="text-decoration-none" href="">
            <div class="card text-center mb-3" style=" background: linear-gradient(to right, rgba(255,0,0,0), rgb(196, 255, 245));; height: 30vh;">
                <div class="card-header">
                    <img src="/images/account-removebg-preview.png" class="img-fluid" style="width: 10vh;"
                        alt="">
                </div>
                <div class="card-body">
                    <h2 class="tickerTimes text-dark" style="font-family: 'Times New Roman', Times, serif;">
                       Account Settings
                    </h2>
                </div>
            </div>
        </a>
    </div>
</div>
</div>


<style>
  .card {
    border-radius: 1rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 6px 0 rgb(218 218 253 / 65%),
      0 2px 6px 0 rgb(206 206 238 / 54%);
  }
  .profile-picture {
    text-align: center;
  }
  .profile-image {
    width: 150px;
    height: 150px;
    background-color: #ccc; /* Default background color */
    border-radius: 50%; /* Creates a circle */
    display: inline-block;
  }
  .profile-upload-btn {
    margin-top: 8px;
    display: inline-block;
    padding: 8px 16px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
</style>
<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
<script>
    $("#passwordChangeForm").submit((e) => {
  e.preventDefault();
  $.ajax({
    url: '/changePassword',
    method: 'post',
    data: $('#passwordChangeForm').serialize(),
    success: (response) => {
      if (response.success) {
        console.log('Password changed successfully');
        // Close the modal
        $('#changePasswordModal').modal('hide');
        // Show a success message
        // You can replace this with your preferred success message display logic
        alert('Password changed successfully');
      } else {
        // Show a flash message
        $('#flashMessage').text(response.error).show();
      }
    },
    error: (xhr, status, error) => {
      // Handle the AJAX error
      console.log('Error:', error);
      // Show a flash message
      $('#flashMessage').text('An error occurred. Please try again.').show();
    }
  });
});
</script>
<%- include('../layouts/footer') %>







// Create a new ObjectId
// const objectId = new mongoose.Types.ObjectId();

// Example usage in your Cart:
// const sampleCart = new Cart({
//   UserId: '65240a79ea2b5820475f6a74', // Use the generated ObjectId here
//   Items: [
//     {
//       ProductId: '652cc93432547de3bad122c4', // Use the generated ObjectId here
//       Quantity: 1,
//     },
//     // Add more items if needed
//   ],
//   TotalAmount: 30000,
// });

// // Save the cart to the database
// sampleCart.save()
//   .then(() => {
//     console.log('Sample cart saved to the database.');
//   })
//   .catch((error) => {
//     console.error('Error saving sample cart:', error);
//   });

// router.get('/homepage', async (req, res) => {
//   const user = await User.find()
//   const categories = await Category.find()
//   const brands = await Brand.find();
//   const products = await Product.find();
//   const currentPage = req.query.page || 1; // Assuming 'page' is passed as a query parameter
//   const perPage = 10  
//   const totalCount = products.length; // Calculate the total count based on the products array
//   const totalPages = Math.ceil(totalCount / perPage);
//   res.render('user/shop', {user,categories,brands,products,currentPage, perPage,totalCount,totalPages}); //  
// })
// Import your cart model


// async function createCartsForExistingUsers() {
//   try {
//     const users = await User.find({}).exec();
    
//     for (const user of users) {
//       const newCart = new Cart({
//         UserId: user._id, // Set the UserId to match the user's ID
//         // Other cart-specific data like Items and TotalAmount
//       });
      
//       await newCart.save(); // Use await to save the cart
//     }
//   } catch (err) {
//     console.error(err);
//   }
// }


// createCartsForExistingUsers();
// function createCartForUser(userId) {
//   const newCart = new Cart({
//     UserId: userId, // Set the UserId to match the user's ID
//     // Other cart-specific data like Items and TotalAmount
//   });

//   // Save the new cart document to the database
//   newCart.save((err, cart) => {
//     if (err) {
//       console.error(err);
//     } else {
//       // At this point, a cart document has been created for the user
//     }
//   });
// }



// router.post('/changePassword', async (req, res) => {
//   const userId = req.session.userId;
//   console.log("Inside change password");
//   const user = await User.findById(userId);
//   try {
//     const dbPassword = user.password;
//     console.log(req.body);
//     console.log('dbPassword:', dbPassword); // Check if dbPassword is correctly retrieved
// console.log('req.body.newPassword:', req.body.newPassword); // Check the new password
//     let passwordIsValid = bcrypt.compare(req.body.newPassword, dbPassword);
//     console.log('passwordIsValid:', passwordIsValid); 
//     if (passwordIsValid) {
//       res.json({ error: "New Password cannot be the same as the current one" });
//     } else if (req.body.newPassword === req.body.confirmPassword) {
//       let passwordHashed = bcrypt.hashSync(req.body.newPassword, 8);
//       const result = await User.updateOne(
//         { _id: userId },
//         { $set: { password: passwordHashed } },
//         { new: true }
//       );
//       res.json({
//         success: true,
//         message: "Password changed successfully",
//       });
//     } else {
//       res.json({ error: "Current Password is incorrect" });
//     }
//   } catch (err) {
//     console.log(err);
//     res.status(500).json({ success: false, error: "Password change failed" });
//   }
// })



// router.get('/checkstock', async (req, res) => {
//   try {
//     const productsData = req.body; // Assuming it's an array of product data

//     const stockStatus = [];

//     for (const productData of productsData) {
//       // You may want to validate the productData structure here
//       // Ensure it contains a productId and quantity, and validate them as needed

//       // Query the product with the specified product ID
//       const product = await Product.findOne({ _id: productData.productId });

//       if (product) {
//         const availableQuantity = product.stock;
//         const requestedQuantity = productData.quantity;

//         if (availableQuantity >= requestedQuantity) {
//           stockStatus.push({ productId: product._id, success: true });
//         } else {
//           stockStatus.push({ productId: product._id, success: false, error: 'Insufficient stock' });
//         }
//       } else {
//         // Product not found
//         stockStatus.push({ productId: productData.productId, success: false, error: 'Product not found' });
//       }
//     }

//     res.status(200).json(stockStatus);
//   } catch (error) {
//     res.status(500).json({ success: false, error: 'Server error' });
//   }
// });













else if(PaymentMethod === "wallet"){
  const transporter = nodemailer.createTransport({
    port: 465,
    host: "smtp.gmail.com",
    auth: {
      user: "techboompage@gmail.com",
      pass: process.env.PASSWORD,
    },
    secure: true,
  });
  const mailData = {
    from: "techboompage@gmail.com",
    to: Email,
    subject: "Your Orders!",
    text:
      `Hello! ${user.Username} Your order has been received and will be processed within one business day.` +
      ` your total price is ${req.session.totalPrice}`,
  };
  transporter.sendMail(mailData, (error, info) => {
    if (error) {
      return console.log(error);
    }
    console.log("Success");
  });
  await User.findByIdAndUpdate(userId,{$inc:{WalletAmount: -order.TotalPrice}})
  await Order.findByIdAndUpdate(order._id,{PaymentStatus:'Paid'})
  await Cart.findByIdAndDelete(cart._id);
  res.json({ walletSuccess: true });
}























  const page = parseInt(req.query.page) || 1;
    const perPage = 16;
    const skip = (page - 1) * perPage;
    const users = await User.find().skip(skip).limit(perPage);
    const totalCount = await Product.countDocuments();
    console.log(req.url);
    console.log(req.session.user);
    const userId = req.session.userId;
    const user = await User.findById(userId);
    const categories = await Category.find();
    const brands = await Brand.find();
    const id = req.params._id;
   
    let products;
    let query = req.query.query;
    const reg = new RegExp(`^${query}`, "i");
    if (query) {
      products = await Product.find({ name: { $regex: reg } });
      return res.render("user/shop", {
        user,
        categories,
        brands,
        products,
        currentPage: page,
        perPage,
        totalCount,
        totalPages: Math.ceil(totalCount / perPage),
      });
    } else {
      if (req.url === "/shop") {
        const products = await Product.find({ Category: id,status: "Active" });
        console.log("Products:", products);
        return res.render("user/shop", {
          user,
          categories,
          brands,
          products,
          currentPage: page,
          perPage,
          totalCount,
          totalPages: Math.ceil(totalCount / perPage),
        });
       
      } else if (req.url === `/category/${id}`) {
        console.log("inside category");
        const products = await Product.find({
          category: id,
          status: "Active",
        }).lean();
        // console.log("MongoDB Query:", products.getQuery());

        res.render("user/shop", {
          user,
          categories,
          brands,
          products,
          currentPage: page,
          perPage,
          totalCount,
          totalPages: Math.ceil(totalCount / perPage),
        });
      } else if (req.url === `/brand/${id}`) {
        console.log("inside brand");
        const products = await Product.find({
          BrandName: id,
          status: "Active",
        });
        res.render("user/shop", {
          user,
          categories,
          brands,
          products,
          currentPage: page,
          perPage,
          totalCount,
          totalPages: Math.ceil(totalCount / perPage),
        });
      }
    }





















      const categoryItems = document.querySelectorAll(".category-item");

  categoryItems.forEach((item) => {
    item.addEventListener("mouseenter", () => {
      const subcategoryList = item.querySelector(".subcategory-list");
      if (subcategoryList) {
        subcategoryList.style.display = "block";
      }
    });

    item.addEventListener("mouseleave", () => {
      const subcategoryList = item.querySelector(".subcategory-list");
      if (subcategoryList) {
        subcategoryList.style.display = "none";
      }
    });
  });

  // Define brandItems and add event listeners for brand items
  const brandItems = document.querySelectorAll(".brand-item");

  brandItems.forEach((item) => {
    item.addEventListener("mouseenter", () => {
      const subbrandList = item.querySelector(".subbrand-list");
      if (subbrandList) {
        subbrandList.style.display = "block";
      }
    });

    item.addEventListener("mouseleave", () => {
      const subbrandList = item.querySelector(".subbrand-list");
      if (subbrandList) {
        subbrandList.style.display = "none";
      }
    });
  });



  function applyFilters() {
        
        const selectedCategories = getCheckedValues ("category");

        const selectedBrands = getCheckedValues ("brand");

        const selectedPrices = getSelectedValues("price");

        localStorage.setItem("selectedCategories", selectedCategories.join(","));
        localStorage.setItem("selectedBrands", selectedBrands.join(","));
        localStorage.setItem("selectedPrice", selectedPrices || "");


        const filtersURL = `/shop?categories=${selectedCategories.join(",")}&brands=${selectedBrands.join(",")}&prices=${selectedPrices}`;

        $.ajax({
          url: filtersURL,
          type: "GET",
          success: (response)=>{
            const productsContainer = $("#productsContainer");

            // Clear previous products
            productsContainer.empty();

            // Append new products
            response.products.forEach ((product) => {
                const productCard = `
                    <div class="col-md-6 col-lg-3 col-sm-6 mb-4 equal-width">
                        <div class="card tickerTimes">
                            <img src="/uploads/${product.images[0]}" class="card-img-top" style="height: 40vh" alt="" />
                            <div class="card-body d-flex flex-column justify-content-between" style="height: 30vh">
                                <h6 class="card-title text-center product-name">${product.ProductName}</h6>
                                <div class="d-flex flex-column justify-content-center">
                                    ${product.AvailableQuantity === 0 ? 
                                        `<div style="background-color: red">
                                            <p class="card-text text-center text-light">Out of Stock</p>
                                        </div>` : 
                                        `<p class="card-text text-center">Price ₹${product.Price}</p>
                                        <a href="/product/${product._id}" class="btn btn-primary text-center">View Details</a>`}
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Append the product card to the container
                productsContainer.append(productCard);
            });
          }
        })
        console.log(filtersURL);
    }








<%- include('../layouts/header') %>
<%- include('../partials/user-header') %>

<style>
  /* Style for the table rows */
  .order-card {
    border-radius: 0.5rem; /* Increase border radius for each card */
    margin-bottom: 0.5rem; /* Add a gap between cards */
  }
</style>
<% order.forEach(function (order) { %>
<div class="modal fade" id="returnReasonModal<%= order._id %>" tabindex="-1" aria-labelledby="returnReasonModalLabel<%= order._id %>" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="returnReasonModalLabel<%= order._id %>">Reason for Return</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form method="post" action="/order/return/<%= order._id %>">
          <div class="mb-3">
            <label for="returnReason" class="form-label">Please provide a reason for returning the order:</label>
            <textarea class="form-control" name="returnReason" id="returnReason" rows="3" required></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" data-bs-dismiss="modal" class="btn btn-primary" >Submit</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </form>
    </div>
  </div>
</div>
<% }); %>
<div class="container tickerTimes mt-5">
  <h2>Your Order List</h2>
  <% if (order && order.length > 0) { %>
    <% order.forEach(function (order) { %>
      <div class="card shadow order-card">
        <div class="card-body">
          <h5 class="card-title">Order ID: ORD-<%= order._id %></h5>
          <p class="card-text">Payment Method: <%= order.PaymentMethod %></p>
          <p class="card-text">Order Status: <%= order.Status %></p>
          <p class="card-text">Payment Status: <%= order.PaymentStatus %></p>
          <p class="card-text">Date: <%= order.OrderDate %></p> 
          <div class="d-flex justify-content-end">
            <% if (order.Status === 'Delivered') { %>
              <a  data-bs-toggle="modal" data-bs-target="#returnReasonModal<%= order._id %>" class="btn btn-danger me-2">Return</a>
              <button class="btn btn-warning" onclick="downloadInvoice('<%= order._id %>')">Download Invoice </button>
              <% } else if (order.Status === 'Returned') { %>
                <a href="/order/details/<%= order._id %>" class="btn btn-primary me-2">View Details</a>
                <button class="btn btn-danger" disabled>Returned</button>
                <% }else if (order.Status === 'Return Requested') { %>
                  <a href="/order/details/<%= order._id %>" class="btn btn-primary me-2">View Details</a>
                  <a href="/order/cancelRequest/<%= order._id %>" class="btn btn-danger me-2">Return Requested/Cancel Request</a>
                  <button class="btn btn-warning " onclick="downloadInvoice('<%= order._id %>')">Download Invoice</button>
                  <% }else if (order.Status === 'Return Rejected') { %>
                    <a href="/order/details/<%= order._id %>" class="btn btn-primary me-2">View Details</a>
                    <button class="btn btn-warning me-2" onclick="downloadInvoice('<%= order._id %>')">Download Invoice </button>
                  <button class="btn btn-danger" disabled>Request Rejected</button>
                <% } else if (order.Status === 'Order Placed' || order.Status === 'Shipped') { %>
              <a href="/order/details/<%= order._id %>" class="btn btn-primary me-2">View Details</a>
              <% if (order.Status !== 'Cancelled') { %>
                <button class="btn btn-danger" onclick="confirmCancellation('<%= order._id %>')">Cancel Order</button>
              <% } %>
            <% } %>
          </div>
        </div>
      </div>
    <% }); %>
  <% } else { %>
    <p>You have no orders yet.</p>
  <% } %>

  <% if (order.length > 0) { %>
    <div class="d-flex justify-content-between align-items-center mt-3">
      <p>Showing <%= (currentPage - 1) * perPage + 1 %>-
        <% if(currentPage === totalPages) { %>
          <%= totalCount %>
        <% } else { %>
          <%= currentPage * perPage %>
        <% } %>
        results from <%= totalCount %></p>
      <ul class="pagination">
        <% for (let i = 1; i <= totalPages; i++) { %>
          <li class="page-item <%= currentPage === i ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
          </li>
        <% } %>
      </ul>
    </div>
  <% } else { %>
    <p>No results found.</p>
  <% } %>
</div>

<script>
  function confirmCancellation(orderId) {
    const confirmation = confirm('Are you sure you want to cancel this order?');
    console.log('Confirmation:', confirmation);
    if (confirmation) {
      console.log('Order cancellation confirmed. Redirecting...');
      window.location.href = '/order/cancel/' + orderId;
    }
  }
  async function downloadInvoice(orderId) {
                  try {
                    console.log('Downloading invoice for orderId:', orderId); 
                    const response = await fetch('/download-invoice', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({ orderId }),
                    })
                    if (response.ok) {

                      console.log('Invoice download successful. Redirecting...');
                      window.location.href = `/download-invoice/${orderId}`;
                    }
                  } catch (err) {
                  console.error('Error in downloadInvoice:', err);
                    console.error("error in order History", err)
                  } finally {
                    // loadingSpinner.style.display = 'none';
                    console.log('Download invoice function completed.');
                  }
                }

  // function submitReturnReason(orderId){
  //   let reason = document.getElementById('returnReason').value;
  //   console.log("onsideeee",reason);
  //   $.ajax({
  //     url:`/order/return/${orderId}`,
  //     type:"post",
  //     data:{
  //       returnReason:reason,
  //       orderId:orderId
  //     },
  //     success:function(){
  //       $('#returnReasonModal').modal('hide');
  //       alert("request sent Successfully");
  //     },
  //   })
  //   }
</script>
<%- include('../layouts/footer') %>









function getStoredFilters() {
    const storedCategories = localStorage.getItem("selectedCategories");
 
    const storedPrice = localStorage.getItem("selectedPrice");

    return {
      selectedCategories: storedCategories ? storedCategories.split(",") : [],
   
      selectedPrice: storedPrice || null,
    };
  }
  const storedFilters = getStoredFilters();
console.log('Stored Filters:', storedFilters);
  function applyFilters() {
        
        const selectedCategories = getCheckedValues ("category");

    
        const selectedPrices = getSelectedValues("price");

        localStorage.setItem("selectedCategories", selectedCategories.join(","));
     
        localStorage.setItem("selectedPrice", selectedPrices || "");

        console.log('Stored Categories:', localStorage.getItem("selectedCategories"));
console.log('Stored Price:', localStorage.getItem("selectedPrice"));
        const filtersURL = `/shop?categories=${selectedCategories.join(",")}&prices=${selectedPrices}&localStorageData=${JSON.stringify(storedFilters)}`;

        $.ajax({
          url: filtersURL,
          type: "GET",
          dataType: 'json',
          success: (response)=>{
            if (response.products && Array.isArray(response.products)){
            const productsContainer = $("#productsContainer");

            // Clear previous products
            productsContainer.empty();

            // // Append new products
            // response.products.forEach ((product) => {
            //     const productCard = `
            //         <div class="col-md-6 col-lg-3 col-sm-6 mb-4 equal-width">
            //             <div class="card tickerTimes">
            //                 <img src="/uploads/${product.images[0]}" class="card-img-top" style="height: 40vh" alt="" />
            //                 <div class="card-body d-flex flex-column justify-content-between" style="height: 30vh">
            //                     <h6 class="card-title text-center product-name">${product.name}</h6>
            //                     <div class="d-flex flex-column justify-content-center">
            //                         ${product.stock === 0 ? 
            //                             `<div style="background-color: red">
            //                                 <p class="card-text text-center text-light">Out of Stock</p>
            //                             </div>` : 
            //                             `<p class="card-text text-center">Price ₹${product.price}</p>
            //                             <a href="/product/${product._id}" class="btn btn-primary text-center">View Details</a>`}
            //                     </div>
            //                 </div>
            //             </div>
            //         </div>
            //     `;

            //     // Append the product card to the container
            //     productsContainer.append(productCard);
            // });
          
          }
          else {
        console.error("Invalid or missing 'products' array in the response");
        }
        }

    
        })
        console.log(filtersURL);
    }

    function setCheckedValues() {
    const storedFilters = getStoredFilters();

    storedFilters.selectedCategories.forEach((category) => {
      $(`input[name="category"][value="${category}"]`).prop("checked", true);
    });

    

    if (storedFilters.selectedPrice) {
      $(`input[name="price"][value="${storedFilters.selectedPrice}"]`).prop("checked", true);
    }
  }

  // Call setCheckedValues on page load
  $(document).ready(setCheckedValues);


    function getCheckedValues(checkboxName) {
        const checkboxes = document.querySelectorAll(`input[name="${checkboxName}"]:checked`);
        const values = Array.from(checkboxes).map(checkbox => checkbox.value);
        return values;
    }

    function getSelectedValues(name) {
    const selectedRadio = document.querySelector(`input[name="${name}"]:checked`);
    return selectedRadio ? selectedRadio.value : null;
    }
    console.log(localStorage.getItem("selectedCategories"));
console.log(localStorage.getItem("selectedPrice"));










<script>
  
function getStoredFilters() {
    const storedCategories = localStorage.getItem("selectedCategories");
    const storedPrice = localStorage.getItem("selectedPrice");

    return {
      selectedCategories: storedCategories ? storedCategories.split(",") : [],     
      selectedPrice: storedPrice || null,
    };
  }

  function applyFilters() {
        
        const selectedCategories = getCheckedValues ("category");


        const selectedPrices = getSelectedValues("price");

        localStorage.setItem("selectedCategories", selectedCategories.join(","));
       
        localStorage.setItem("selectedPrice", selectedPrices || "");


        const filtersURL = `/shop?categories=${selectedCategories.join(",")}&prices=${selectedPrices}`;

        $.ajax({
          url: filtersURL,
          type: "GET",
          success: (response)=>{
            const productsContainer = $("#productsContainer");

            // Clear previous products
            productsContainer.empty();

            // Append new products
            response.products.forEach ((product) => {
                const productCard = `
                    <div class="col-md-6 col-lg-3 col-sm-6 mb-4 equal-width">
                        <div class="card tickerTimes">
                            <img src="/uploads/${product.images[0]}" class="card-img-top" style="height: 40vh" alt="" />
                            <div class="card-body d-flex flex-column justify-content-between" style="height: 30vh">
                                <h6 class="card-title text-center product-name">${product.ProductName}</h6>
                                <div class="d-flex flex-column justify-content-center">
                                    ${product.AvailableQuantity === 0 ? 
                                        `<div style="background-color: red">
                                            <p class="card-text text-center text-light">Out of Stock</p>
                                        </div>` : 
                                        `<p class="card-text text-center">Price ₹${product.Price}</p>
                                        <a href="/product/${product._id}" class="btn btn-primary text-center">View Details</a>`}
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Append the product card to the container
                productsContainer.append(productCard);
            });
          }
        })
        console.log(filtersURL);
    }

    function setCheckedValues() {
    const storedFilters = getStoredFilters();

    storedFilters.selectedCategories.forEach((category) => {
      $(`input[name="category"][value="${category}"]`).prop("checked", true);
    });


    if (storedFilters.selectedPrice) {
      $(`input[name="price"][value="${storedFilters.selectedPrice}"]`).prop("checked", true);
    }
  }

  // Call setCheckedValues on page load
  $(document).ready(setCheckedValues);


    function getCheckedValues(checkboxName) {
        const checkboxes = document.querySelectorAll(`input[name="${checkboxName}"]:checked`);
        const values = Array.from(checkboxes).map(checkbox => checkbox.value);
        return values;
    }

    function getSelectedValues(name) {
    const selectedRadio = document.querySelector(`input[name="${name}"]:checked`);
    return selectedRadio ? selectedRadio.value : null;
    }




     const getShop= async (req, res) => {
    const page = parseInt(req.query.page) || 1;
    const perPage = 16;
    const skip = (page - 1) * perPage;
    
    // Fetch user and other necessary data
    const userId = req.session.userId;
    const user = await User.findById(userId);
    const categories = await Category.find();
    const brands = await Brand.find();
    const id = req.params._id;
    
    // Fetch products based on local storage data if available
    const localStorageData = req.query.localStorageData; // You need to define how local storage data is passed in the query

    let products;
    
    if (localStorageData) {
        // Parse and process local storage data (modify as per your local storage data structure)
        const localStorageParsedData = JSON.parse(localStorageData);
        const categoryIds = localStorageParsedData.categories;

        // Fetch products based on local storage data
        products = await Product.find({ Category: { $in: categoryIds } });
    } else {
        // Fetch all products if no local storage data is present
        products = await Product.find().skip(skip).limit(perPage);
    }

    const totalCount = await Product.countDocuments();

    // Render the view with the fetched products
    res.render('user/shop', {
        user,
        categories,
        brands,
        products,
        currentPage: page,
        perPage,
        totalCount,
        totalPages: Math.ceil(totalCount / perPage)
    })
};


const getSearch = async (req, res) => {
  try {
    const searchQuery = req.body.query;

    const categoryResults = await Category.find({ Name: { $regex: searchQuery, $options: "i" } });

    const productCriteria = {
      $or: [{ ProductName: { $regex: searchQuery, $options: "i" } }],
    };

    const productResults = await Product.find(productCriteria);

    const results = {
      products: productResults,
      categories: categoryResults,
      // No brandResults in this version
    };

    res.json(results);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "An error occurred" });
  }
};