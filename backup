// nodemailer
// const sendOTPVerificationEmail = async (req, res) => {
//   try {

//     const otp = `${Math.floor(1000 + Math.random() * 9000)}`;
//     const duration = "  14 minutes";
//     const message = "Enter This OTP to Continue";
//     const mailOptions = {
//       from: 'techboompage@gmail.com',
//       to: 'anasmuhammed444@gmail.com',
//       subject: 'verify your email',
//       text: otp,
//       html: `<p>${message}</p> <p style="color: tomato; font-size: 25px; letter-spacing: 2px;"><b>${otp}</b></p><p>This Code <b>expires in ${duration} minutes(s)</b>.</p>`,
//     };
//     console.log('Generated OTP', otp);
//     transporter.sendMail(mailOptions, (error, info) => {
//       if (error) {
//         console.error('Error sending email:', error);
//         res.status(500).json({ error: 'Error sending email' });
//       } else {
//         console.log('Email sent successfully:', info.response);
//         res.status(200).json({ message: 'Email sent successfully' });
//       }
//     });
//   } catch (error) {
//     res.status(500).json({ error: error.message });
//   }
// };














// document.addEventListener("DOMContentLoaded", () => {
//   const decreaseButtons = document.querySelectorAll(".decrease-quantity");
//   const increaseButtons = document.querySelectorAll(".increase-quantity");

//   // Function to update total amount
//   function updateTotalAmount() {
//     let totalAmount = 0;

//     // Get all product rows
//     const productRows = document.querySelectorAll(".row.gy-3.mb-4");
//     productRows.forEach((row) => {
//       const productId = row
//         .querySelector(".decrease-quantity")
//         .getAttribute("data-product-id");
//       const quantityInput = row.querySelector(`#count_${productId}`);
//       const quantity = parseInt(
//         row.querySelector(`#count_${productId}`).value,
//         10
//       );
//       const productAmount = parseFloat(
//         row.querySelector(`#productAmount_${productId}`).textContent
//       );

//       totalAmount += productAmount;
//     });


//     // Update the total amount in the HTML
//     const totalAmountCell = document.getElementById("totalAmountCell");
//     const subTotal = document.getElementById("sub-total");
//     totalAmountCell.value = `${totalAmount.toFixed(2)}`;
//     subTotal.textContent = `Rs ${totalAmount.toFixed(2)}`;
//     const hiddenTotalAmount = document.getElementById('hiddenTotalAmount');
//     hiddenTotalAmount.value = totalAmount.toFixed(2);
//   }

//   // Function to send AJAX request to update quantity
//   async function updateQuantity(productId, change) {
//     try {
//       const response = await fetch("/updateQuantity", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ productId, change }),
//       });

//       if (response.ok) {
//         const data = await response.json();
//         console.log("Received new quantity from server:", data.newQuantity);

//         const quantityInput = document.getElementById(`count_${productId}`);
//         const productAmount = document.getElementById(
//           `productAmount_${productId}`
//         );
//         const existingValue = productAmount.getAttribute("data-value");

//         if (quantityInput) {
//           quantityInput.value = data.newQuantity;
//           productAmount.textContent = existingValue * data.newQuantity;

//           // Calculate and update the total amount
//           updateTotalAmount();
//         }
//       } else {
//         console.error("Error updating quantity:", response.statusText);
//       }
//     } catch (error) {
//       console.error("Error updating quantity:", error);
//     }
//   }

//   // Add event listeners to decrease buttons
//   decreaseButtons.forEach((button) => {
//     button.addEventListener("click", () => {
//       const productId = button.getAttribute("data-product-id");
//       const quantityInput = document.getElementById(`count_${productId}`);
//       const quantity = parseInt(quantityInput.value, 10);
//       const availableQuantity = parseInt(quantityInput.getAttribute("data-available-quantity"), 10);

//       if (quantity === 1) {
//         // Prevent further decrease when quantity is 1
//         return;
//       }
//       if (quantity <= availableQuantity) {
//         const outOfStockMessage = document.querySelector(`#outOfStockMessage_${productId}`);
//         outOfStockMessage.style.display = "none";
//       }
//       updateQuantity(productId, -1);
//     });
//   });

//   increaseButtons.forEach((button) => {
//     button.addEventListener("click", () => {
//       // console.log("increase buttons clicked");
//       const productId = button.getAttribute("data-product-id");
//       const quantityInput = document.getElementById(`count_${productId}`);
//       const quantity = parseInt(quantityInput.value, 10);
//       const availableQuantity = parseInt(quantityInput.getAttribute("data-available-quantity"), 10);
//       const change = 1;
//       fetch("/updateQuantity", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ productId, change }),
//       });
//       // Check if quantity exceeds available quantity
//       if (quantity >= availableQuantity) {
//         // Display "Out of Stock" message
//         const outOfStockMessage = document.querySelector(`#outOfStockMessage_${productId}`);
//         if (outOfStockMessage) {
//           outOfStockMessage.style.display = "block";
//         }

//         // Prevent further increase
//         return;
//       }
//       updateQuantity(productId, 1);
//     });
//   });

//   updateTotalAmount();
// }); -->











// document.addEventListener("DOMContentLoaded", () => {
//     const increaseButtons = document.querySelectorAll(".increase-quantity");
//     const decreaseButtons = document.querySelectorAll(".decrease-quantity");
//     // Function to update the total price
//     function updateTotalAmount() {
//       let totalAmount = 0;

//       // Get all product rows
//       const productRows = document.querySelectorAll(".row.gy-3.mb-4");
//       productRows.forEach((row) => {
//         const productId = row
//           .querySelector(".decrease-quantity")
//           .getAttribute("data-product-id");
//         const quantityInput = row.querySelector(`#count_${productId}`);
//         const productAmount = parseFloat(
//           row.querySelector(`#productAmount_${productId}`).textContent
//         );

//         totalAmount += productAmount;
//       });






//       // Update the total amount in the HTML
//       const totalAmountCell = document.getElementById("totalAmountCell");
//       totalAmountCell.value = totalAmount.toFixed(2);

//       // If you want to display it in a specific format in the HTML:
//       const subTotal = document.getElementById("sub-total");
//       subTotal.textContent = `Rs ${totalAmount.toFixed(2)}`;

//     }

//     updateTotalAmount();


//     increaseButtons.forEach((button) => {
//       button.addEventListener("click", () => {
//         const productId = button.getAttribute("data-product-id");
//         const quantityInput = document.getElementById(`count_${productId}`);
//         const quantity = parseInt(quantityInput.value, 10);
//         const availableQuantity = parseInt(
//           quantityInput.getAttribute("data-available-quantity"),
//           10
//         );

//         const outOfStockMessage = document.querySelector(
//           `#outOfStockMessage_${productId}`
//         );
//         if (quantity >= availableQuantity) {
//           // Display "Out of Stock" message if needed
//           outOfStockMessage.style.display = "block";
//           return;
//         }

//         // Make an AJAX request to update the quantity
//         updateQuantity(productId, 1);
//       });
//     });

//     decreaseButtons.forEach((button) => {
//       button.addEventListener("click", () => {
//         const productId = button.getAttribute("data-product-id");
//         const quantityInput = document.getElementById(`count_${productId}`);
//         const quantity = parseInt(quantityInput.value, 10);
//         const outOfStockMessage = document.querySelector(
//           `#outOfStockMessage_${productId}`
//         );
//         if (quantity <= 1) {
//           // Prevent further decrease when quantity is 1
//           return;
//         }
//         outOfStockMessage.style.display = "none";
//         // Make an AJAX request to update the quantity
//         updateQuantity(productId, -1);


//       });
//     });

//     // Function to send AJAX request to update quantity
//     async function updateQuantity(productId, change) {
//       try {
//         const response = await fetch("/updateQuantity", {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//           },
//           body: JSON.stringify({ productId, change }),
//         });

//         if (response.ok) {
//           const data = await response.json();
//           // Update the quantity and product amount on success
//           const quantityInput = document.getElementById(`count_${productId}`);
//           const productAmount = document.getElementById(`productAmount_${productId}`);
//           const existingValue = productAmount.getAttribute("data-value");

//           if (quantityInput) {
//             quantityInput.value = data.newQuantity;
//             productAmount.textContent = existingValue * data.newQuantity;

//             // You may also update the total amount
//             updateTotalAmount();
//           }

//         }
//         else if (response.status === 400) {
//           const data = await response.json();
//           alert(data.error); // Display the "Product is currently out of sto
//         }
//         else {
//           console.error("Error updating quantity:", response.statusText);
//         }
//       } catch (error) {
//         console.error("Error updating quantity:", error);
//       }
//     }



//   });